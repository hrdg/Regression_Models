- Class: meta
  Course: Regression_Models
  Lesson: MultiVar_Examples2
  Author: Swirl Coders
  Type: Coursera
  Organization: Johns Hopkins Bloomberg School of Public Health
  Version: 2.2.0

- Class: text
  Output: "多变量的例子2. (Slides for this and other Data Science courses may be found at github https://github.com/DataScienceSpecialization/courses. If you care to use them, they must be downloaded as a zip file and viewed locally. This lesson corresponds to Regression_Models/02_02_multivariateExamples.)"

- Class: text
  Output: 这是多元回归模型的第二课。这次我们将从InsectSprays数据开始，数据来源于R的数据包。这个数据是记录不同杀虫剂的效力，我们将在幻灯片的编码用箱形图去展示这些数据。

- Class: exact_question
  Output: 在数据集中有多少种杀虫喷雾？
  CorrectAnswer: 6
  AnswerTests: omnitest(correctVal=6)
  Hint: 在字母序列中有多少个字母  A, B, C, D, E, F ?


- Class: text_question
  Output: 箱形图中哪种喷雾有最大的中值？
  CorrectAnswer: B
  AnswerTests: omnitest(correctVal='B')
  Hint:  每种 spray的中值是由每个箱中最黑的线给出的， 哪个 spray的中值 离 0最远?


- Class: cmd_question
  Output: 首先让我们对InsectSprays数据集有更深入的认识吧。用函数dim查看数据的规模。
  CorrectAnswer: dim(InsectSprays)
  AnswerTests: omnitest(correctExpr='dim(InsectSprays)')
  Hint: 输入 "dim(InsectSprays)"

- Class: cmd_question
  Output: 由函数dim知道InsectSprays是一个72×2的序列。用函数head去查找InsectSprays前15个基本元素。
  CorrectAnswer: head(InsectSprays,15)
  AnswerTests: omnitest(correctExpr='head(InsectSprays,15)')
  Hint: 输入 "head(InsectSprays,15)"
  
- Class: cmd_question
  Output: 所以这个数据集包含72个数，每个数都对应着一个特定的不同的喷雾。这些数都在第一行，第二行用一个英文字母来代表喷雾。我们已经为不同的喷雾与其对应的数字生产了6个序列。这个序列名为sx，其中的x可以是A,B,C,D,E或 F。在这些序列中输入其中一个你喜欢的名字，看看我们表达的是什么。
  CorrectAnswer: sA
  AnswerTests: ANY_of_exprs('sA','sB','sC','sD','sE','sF')
  Hint: 输入 sA .

- Class: cmd_question
  Output: 作为检查，对数据集的第二列数据运行summary函数去看看每种喷雾有多少条目。（用表达式M[ ,2]生产M的第二列）
  CorrectAnswer: summary(InsectSprays[,2])
  AnswerTests: omnitest(correctExpr='summary(InsectSprays[,2])')
  Hint: 输入 "summary(InsectSprays[,2])" 

- Class: text
  Output: 不难发现对于72个数字，我们6种喷雾各分布有12个数据。在这节课，我们将关心多层次因素水平和解释多于两个变量的线性模型。
  
- Class: cmd_question
  Output: 用函数sapply去找出数据列的分类。
  CorrectAnswer: sapply(InsectSprays,class)
  AnswerTests: omnitest(correctExpr='sapply(InsectSprays,class)')
  Hint: 输入 "sapply(InsectSprays,class)" 
  
- Class: text
  Output: 第二列的喷雾的分类是定性因素。从以前幻灯片提及得知，方程式代表一个特定变量和其他一些变量之间的关系，包含二元变量，一个变量对其他每个变量。这个数据有6个因素，所以我们需要6个虚拟变量。每个虚拟变量解释特殊变量（count）是与特殊因素或定性种类（杀虫剂）是否有联系。
  
- Class: cmd_question
  Output: 用lm函数生产一个线性模型，这个线性模型中count作为被解释变量，杀虫剂作为解释变量。R函数lm的参数形式是y~x，y是依赖于自变量x，数据集是InsectSprays，把模型储存在变量fit中。
  CorrectAnswer: fit <- lm(count ~ spray, InsectSprays)
  AnswerTests: creates_lm_model('fit <- lm(count ~ spray, InsectSprays)')
  Hint: 输入 "fit <- lm(count ~ spray, InsectSprays)"

- Class: cmd_question
  Output: 用summary函数，看看模型的参数。记得R语言实现这个命令的结构是x$coef。
  CorrectAnswer: summary(fit)$coef
  AnswerTests: omnitest(correctExpr='summary(fit)$coef')
  Hint: 输入 "summary(fit)$coef" 

- Class: cmd_question
  Output: 注意到R返回一个6成4的序列。方便起见，把这序列的第一列（估计列）储存在变量est中。在R语言的结构里面选择第一行的编码是x[,1]。
  CorrectAnswer: est <- summary(fit)$coef[,1]
  AnswerTests: omnitest(correctExpr='est <- summary(fit)$coef[,1]')
  Hint: 输入 "est <- summary(fit)$coef[,1]" 


- Class: text
  Output: 注意到A喷雾没有明确出现在估计值的列表中。然而，它出现在估计列中的第一个目录中。它只是被标记为Intercept。这是因为喷雾A是按字母排列的因素水平的第一个目录，还有R在t检验时默认引用第一级别目标，而不使用相对于第一级别目标的其他组或级别。
  
- Class: cmd_question
  Output: 在这个模型，预测值代表什么呢？当然他们是二元或多元变量与sparys联系的参数。更重要的事，截距是引用组的均值，相当于这里的sprayA，其他估计值是各组均值离引用组均值的距离。现在我们来证明这些，首先我们计算sprayA里面的数，那些数都记录在sA中，所以我们是求sA的均值。
  CorrectAnswer: mean(sA)
  AnswerTests: omnitest(correctExpr='mean(sA)')
  Hint: 输入 "mean(sA)" 

- Class: mult_question
  Output: 你认为sprayB是多少?
  AnswerChoices: 15.3333; 0.83333; -12.41667; I haven't a clue
  CorrectAnswer: 15.3333
  AnswerTests: omnitest(correctVal='15.3333')
  Hint: 在sprayB的估计值中加上截距的值产生sprayB的经验均值。
  
- Class: cmd_question
  Output: 现在用mean函数证明sprayB的均值是15.3333.
  CorrectAnswer: mean(sB)
  AnswerTests: omnitest(correctExpr='mean(sB)')
  Hint: 输入 "mean(sB)" 

- Class: cmd_question
  Output: 用这些数据构造另一个模型，这次忽略掉截距。我们用lm函数并在方差中加上" - 1"能非常容易地实现，例如count ~ spray – 1。这命令R省略掉第一级目录。把这个新模型储存在新模型nfit中。
  CorrectAnswer: nfit <- lm(count ~ spray - 1, InsectSprays)
  AnswerTests: creates_lm_model('nfit <- lm(count ~ spray - 1, InsectSprays)')
  Hint: 输入 "nfit <- lm(count ~ spray - 1, InsectSprays)" 

- Class: cmd_question
  Output: 现在，跟上面做同样的事，从模型nfit的概括查看参数部分。
  CorrectAnswer: summary(nfit)$coef
  AnswerTests: omnitest(correctExpr='summary(nfit)$coef')
  Hint: 输入 "summary(nfit)$coef" 

- Class: text
  Output: 注意到sprayA在估计值的列表出现了。同样注意到列的值是怎样变化的。现在各组的均值都在估计列中展现出来。在之前，模型有截距的时候，sprayA被排除掉，它的均值就是截距，而其他sprays的值（估计值。标准差，t值）的计算都与sprayA有关，所以省略掉截距明显会影响到模型。
  
- Class: mult_question
  Output: 现在在估计值列中的值是什么？
  AnswerChoices: The means of all 6 levels; The variances of all 6 levels; I have no idea
  CorrectAnswer: The means of all 6 levels
  AnswerTests: omnitest(correctVal='The means of all 6 levels')
  Hint: 这些数看起来很相近，尤其是sprayA和sprayB。你对这两个spray算出的值是什么？

- Class: mult_question
  Output: 没有截距（参照组）后，检查到counts的期望（组均值）是不同于零。哪种spray最不显著？ 
  AnswerChoices: sprayC; sprayF; sprayB; sprayA
  CorrectAnswer: sprayC
  AnswerTests: omnitest(correctVal='sprayC')
  Hint: 哪种spray的概率最高？

- Class: text
  Output: 明显地，那个级别第一的对模型是非常重要的。如果你想要一个不同的参照组，例如去比较sprayB和sprayC，你可以用不同的参照组去重新拟合模型。
  
- Class: cmd_question
  Output: 函数Relevel能准确的完成这个任务，它能重新排列因素的级别。我们将用两个参数重新排等级。第一个是个因子，在这个案例中是InsectSprays$spray，第二个是我们想它排到第一的级别，在这里是C。把这个结果储存到spray2。
  CorrectAnswer: spray2 <- relevel(InsectSprays$spray,"C")
  AnswerTests: omnitest(correctExpr='spray2 <- relevel(InsectSprays$spray,"C")')
  Hint: 输入 "spray2 <- relevel(InsectSprays$spray,\"C\")" 

- Class: cmd_question
  Output: 现在构造一个新线性模型并保存在fit2中。
  CorrectAnswer: fit2 <- lm(count ~ spray2, InsectSprays)
  AnswerTests: creates_lm_model('fit2 <- lm(count ~ spray2, InsectSprays)')
  Hint: 输入 "fit2 <- lm(count ~ spray2, InsectSprays)" 


- Class: cmd_question
  Output: 在这之前，先查看新模型fit2的参数部分，看看sprayC如何成为截距的。（因为它不会在列表中出现）
  CorrectAnswer: summary(fit2)$coef
  AnswerTests: omnitest(correctExpr='summary(fit2)$coef')
  Hint: 输入 "summary(fit2)$coef" 
  
- Class: mult_question  
  Output: 这个新模型中spary2 C的均值是什么？
  AnswerChoices: 2.083333; 12.416667; 14.583333; The model doesn't tell me.
  CorrectAnswer: 2.083333
  AnswerTests: omnitest(correctVal='2.083333')
  Hint: 截距是参考组的均值，在这里sprayC，所以看到在估计列中Intercept行的值。
  
- Class: cmd_question
  Output: 用函数mean来证明你的回答，用序列sC作为参数。
  CorrectAnswer: mean(sC)
  AnswerTests: omnitest(correctExpr='mean(sC)')
  Hint: 输入 "mean(sC)" 


- Class: mult_question  
  Output: 这个新模型中spary2 A的均值是什么？
  AnswerChoices: 14.50000; 12.416667; 14.583333; I don't have a clue
  CorrectAnswer: 14.50000
  AnswerTests: omnitest(correctVal='14.50000')
  Hint: 在这里的截距不再是参考组的均值，而是截距+参数（估计值），在这里是spray2a。所以你需要把这两个数加起来。
  
- Class: text
  Output: 在这个模型sprayC是一个参照组，所以t统计量（在参数的概括中第三列）对比sprayC与其他spray。这些可以用原来以sprayA作为参照的模型（fit）的估计值和标准差进行手算得出。
  
- Class: cmd_question
  Output: 幻灯片现在手算的详细过程，这里我们将用sprat2B的t值的计算作为解释。用sprayB的参数(fit$coef[2])减去sprayC的参数(fit$coef[3])再除以标准差（1.6011），得到的结果是spray2B的t值。现在动手算一下。
  CorrectAnswer: (fit$coef[2]-fit$coef[3])/1.6011
  AnswerTests: omnitest(correctExpr='(fit$coef[2]-fit$coef[3])/1.6011')
  Hint: 输入 "(fit$coef[2]-fit$coef[3])/1.6011" 

- Class: text
  Output: 我们来总结一下这节课的详细内容,例如counts没有为0，所以是背离正态的假设的。当我们讨论泊松分布时我们将会更加深入的揭示这个问题。多元性性回归的第二课结束。
  

